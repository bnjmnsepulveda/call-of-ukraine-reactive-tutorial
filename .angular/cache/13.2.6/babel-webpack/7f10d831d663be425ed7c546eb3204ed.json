{"ast":null,"code":"import { from, isObservable, of, ReplaySubject } from 'rxjs';\nimport { filter, map, skip } from 'rxjs/operators';\nimport { setAction } from './actions';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { getValue } from './getValueByString';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { hasLocalStorage, hasSessionStorage, isNotBrowser } from './root';\nimport { setValue } from './setValueByString';\nimport { __stores__ } from './stores';\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\nexport function setSkipStorageUpdate(skip) {\n  skipStorageUpdate = skip;\n}\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nfunction isPromise(v) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport function persistState(params) {\n  const defaults = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: !hasLocalStorage() ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    select: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function (storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function (storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => source => source\n  };\n  const {\n    storage,\n    enableInNonBrowser,\n    deserialize,\n    serialize,\n    include,\n    select,\n    key,\n    preStorageUpdate,\n    persistOnDestroy,\n    preStorageUpdateOperator,\n    preStoreUpdate,\n    skipStorageUpdate\n  } = Object.assign({}, defaults, params);\n  if (isNotBrowser && !enableInNonBrowser || !storage) return;\n  const hasInclude = include.length > 0;\n  const hasSelect = select.length > 0;\n  let includeStores;\n  let selectStores;\n\n  if (hasInclude) {\n    includeStores = include.reduce((acc, path) => {\n      if (isFunction(path)) {\n        acc.fns.push(path);\n      } else {\n        const storeName = path.split('.')[0];\n        acc[storeName] = path;\n      }\n\n      return acc;\n    }, {\n      fns: []\n    });\n  }\n\n  if (hasSelect) {\n    selectStores = select.reduce((acc, selectFn) => {\n      acc[selectFn.storeName] = selectFn;\n      return acc;\n    }, {});\n  }\n\n  let stores = {};\n  let acc = {};\n  let subscriptions = [];\n  const buffer = [];\n\n  function _save(v) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  } // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n\n\n  const isLocalStorage = hasLocalStorage() && storage === localStorage || hasSessionStorage() && storage === sessionStorage;\n  observify(storage.getItem(key)).subscribe(value => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}),\n        ...storeCache\n      };\n      storageState = Object.assign({}, storageState, acc);\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]._select(state => getValue(state, path)).pipe(skip(1), map(store => {\n        if (hasSelect && selectStores[storeName]) {\n          return selectStores[storeName](store);\n        }\n\n        return store;\n      }), filter(() => skipStorageUpdate() === false), preStorageUpdateOperator()).subscribe(data => {\n        acc[storeName] = preStorageUpdate(storeName, data);\n        Promise.resolve().then(() => save({\n          [storeName]: __stores__[storeName]._cache().getValue()\n        }));\n      });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n\n        store._setState(state => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName], state));\n        });\n\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n\n        __stores__[storeName].setHasCache(hasCache, {\n          restartTTL: true\n        });\n      }\n    }\n\n    subscriptions.push($$deleteStore.subscribe(storeName => {\n      if (stores[storeName]) {\n        if (persistOnDestroy === false) {\n          save({\n            [storeName]: false\n          });\n        }\n\n        stores[storeName].unsubscribe();\n        delete stores[storeName];\n      }\n    }));\n    subscriptions.push($$addStore.subscribe(storeName => {\n      if (storeName === 'router') {\n        return;\n      }\n\n      const store = __stores__[storeName];\n\n      if (hasInclude) {\n        let path = includeStores[storeName];\n\n        if (!path) {\n          const passPredicate = includeStores.fns.some(fn => fn(storeName));\n\n          if (passPredicate) {\n            path = storeName;\n          } else {\n            return;\n          }\n        }\n\n        setInitial(storeName, store, path);\n        subscribe(storeName, path);\n      } else {\n        setInitial(storeName, store, storeName);\n        subscribe(storeName, storeName);\n      }\n    }));\n\n    _persistStateInit.next(true);\n  });\n  return {\n    destroy() {\n      subscriptions.forEach(s => s.unsubscribe());\n\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n\n      stores = {};\n    },\n\n    clear() {\n      storage.clear();\n    },\n\n    clearStore(storeName) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n\n      const value = storage.getItem(key);\n      observify(value).subscribe(v => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/benjamin/Documents/repositories/learning/reactive-programming-workshop/call-of-ukraine-frontend/node_modules/@datorama/akita/src/lib/persistState.js"],"names":["from","isObservable","of","ReplaySubject","filter","map","skip","setAction","$$addStore","$$deleteStore","getValue","isFunction","isNil","isObject","hasLocalStorage","hasSessionStorage","isNotBrowser","setValue","__stores__","skipStorageUpdate","_persistStateInit","selectPersistStateInit","asObservable","setSkipStorageUpdate","getSkipStorageUpdate","isPromise","v","then","observify","asyncOrValue","persistState","params","defaults","key","enableInNonBrowser","storage","localStorage","deserialize","JSON","parse","serialize","stringify","include","select","persistOnDestroy","preStorageUpdate","storeName","state","preStoreUpdate","preStorageUpdateOperator","source","Object","assign","hasInclude","length","hasSelect","includeStores","selectStores","reduce","acc","path","fns","push","split","selectFn","stores","subscriptions","buffer","_save","subscribe","next","shift","isLocalStorage","sessionStorage","getItem","value","storageState","save","storeCache","setItem","_select","pipe","store","data","Promise","resolve","_cache","setInitial","_setState","hasCache","setHasCache","restartTTL","unsubscribe","passPredicate","some","fn","destroy","forEach","s","i","keys","clear","clearStore"],"mappings":"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","sourcesContent":["import { from, isObservable, of, ReplaySubject } from 'rxjs';\nimport { filter, map, skip } from 'rxjs/operators';\nimport { setAction } from './actions';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { getValue } from './getValueByString';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { hasLocalStorage, hasSessionStorage, isNotBrowser } from './root';\nimport { setValue } from './setValueByString';\nimport { __stores__ } from './stores';\nlet skipStorageUpdate = false;\nconst _persistStateInit = new ReplaySubject(1);\nexport function selectPersistStateInit() {\n    return _persistStateInit.asObservable();\n}\nexport function setSkipStorageUpdate(skip) {\n    skipStorageUpdate = skip;\n}\nexport function getSkipStorageUpdate() {\n    return skipStorageUpdate;\n}\nfunction isPromise(v) {\n    return v && isFunction(v.then);\n}\nfunction observify(asyncOrValue) {\n    if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n        return from(asyncOrValue);\n    }\n    return of(asyncOrValue);\n}\nexport function persistState(params) {\n    const defaults = {\n        key: 'AkitaStores',\n        enableInNonBrowser: false,\n        storage: !hasLocalStorage() ? params.storage : localStorage,\n        deserialize: JSON.parse,\n        serialize: JSON.stringify,\n        include: [],\n        select: [],\n        persistOnDestroy: false,\n        preStorageUpdate: function (storeName, state) {\n            return state;\n        },\n        preStoreUpdate: function (storeName, state) {\n            return state;\n        },\n        skipStorageUpdate: getSkipStorageUpdate,\n        preStorageUpdateOperator: () => (source) => source,\n    };\n    const { storage, enableInNonBrowser, deserialize, serialize, include, select, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign({}, defaults, params);\n    if ((isNotBrowser && !enableInNonBrowser) || !storage)\n        return;\n    const hasInclude = include.length > 0;\n    const hasSelect = select.length > 0;\n    let includeStores;\n    let selectStores;\n    if (hasInclude) {\n        includeStores = include.reduce((acc, path) => {\n            if (isFunction(path)) {\n                acc.fns.push(path);\n            }\n            else {\n                const storeName = path.split('.')[0];\n                acc[storeName] = path;\n            }\n            return acc;\n        }, { fns: [] });\n    }\n    if (hasSelect) {\n        selectStores = select.reduce((acc, selectFn) => {\n            acc[selectFn.storeName] = selectFn;\n            return acc;\n        }, {});\n    }\n    let stores = {};\n    let acc = {};\n    let subscriptions = [];\n    const buffer = [];\n    function _save(v) {\n        observify(v).subscribe(() => {\n            const next = buffer.shift();\n            next && _save(next);\n        });\n    }\n    // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n    const isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);\n    observify(storage.getItem(key)).subscribe((value) => {\n        let storageState = isObject(value) ? value : deserialize(value || '{}');\n        function save(storeCache) {\n            storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n            storageState = Object.assign({}, storageState, acc);\n            buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n            _save(buffer.shift());\n        }\n        function subscribe(storeName, path) {\n            stores[storeName] = __stores__[storeName]\n                ._select((state) => getValue(state, path))\n                .pipe(skip(1), map((store) => {\n                if (hasSelect && selectStores[storeName]) {\n                    return selectStores[storeName](store);\n                }\n                return store;\n            }), filter(() => skipStorageUpdate() === false), preStorageUpdateOperator())\n                .subscribe((data) => {\n                acc[storeName] = preStorageUpdate(storeName, data);\n                Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n            });\n        }\n        function setInitial(storeName, store, path) {\n            if (storeName in storageState) {\n                setAction('@PersistState');\n                store._setState((state) => {\n                    return setValue(state, path, preStoreUpdate(storeName, storageState[storeName], state));\n                });\n                const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n                __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n            }\n        }\n        subscriptions.push($$deleteStore.subscribe((storeName) => {\n            if (stores[storeName]) {\n                if (persistOnDestroy === false) {\n                    save({ [storeName]: false });\n                }\n                stores[storeName].unsubscribe();\n                delete stores[storeName];\n            }\n        }));\n        subscriptions.push($$addStore.subscribe((storeName) => {\n            if (storeName === 'router') {\n                return;\n            }\n            const store = __stores__[storeName];\n            if (hasInclude) {\n                let path = includeStores[storeName];\n                if (!path) {\n                    const passPredicate = includeStores.fns.some((fn) => fn(storeName));\n                    if (passPredicate) {\n                        path = storeName;\n                    }\n                    else {\n                        return;\n                    }\n                }\n                setInitial(storeName, store, path);\n                subscribe(storeName, path);\n            }\n            else {\n                setInitial(storeName, store, storeName);\n                subscribe(storeName, storeName);\n            }\n        }));\n        _persistStateInit.next(true);\n    });\n    return {\n        destroy() {\n            subscriptions.forEach((s) => s.unsubscribe());\n            for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n                const storeName = keys[i];\n                stores[storeName].unsubscribe();\n            }\n            stores = {};\n        },\n        clear() {\n            storage.clear();\n        },\n        clearStore(storeName) {\n            if (isNil(storeName)) {\n                const value = observify(storage.setItem(key, '{}'));\n                value.subscribe();\n                return;\n            }\n            const value = storage.getItem(key);\n            observify(value).subscribe((v) => {\n                const storageState = deserialize(v || '{}');\n                if (storageState[storeName]) {\n                    delete storageState[storeName];\n                    const value = observify(storage.setItem(key, serialize(storageState)));\n                    value.subscribe();\n                }\n            });\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
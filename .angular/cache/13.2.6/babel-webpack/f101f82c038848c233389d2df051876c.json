{"ast":null,"code":"import { BehaviorSubject, concatMap, delay, filter, from, generate, map, merge, mergeMap, of, pluck, share, skipWhile, startWith, switchMap, tap } from 'rxjs';\nimport { ReactiveComponent } from 'src/app/presentation/shared/utils/ReactiveComponent';\nimport { erase, draw, SquareDraw, createColumns, createRows, createSquares } from './model/Square';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"screen\"];\n\nfunction ReactiveGhostOfKievComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const square_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.getSquareClassnames(square_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", square_r2.key, \" \");\n  }\n}\n\nexport class ReactiveGhostOfKievComponent extends ReactiveComponent {\n  constructor() {\n    super(); // screen\n\n    this.title = 'REACTIVE Ghost of Kiev';\n    this.squares = [];\n    this.columns = [];\n    this.rows = []; // game\n\n    this.squareDrawShooter = new SquareDraw({\n      column: 'H',\n      row: 14,\n      name: 'ghost-of-kiev',\n      type: 'shooter'\n    }); // reactive components\n    //squares$: Observable<Square[]> = null\n\n    this.squares$ = new BehaviorSubject([]);\n  }\n\n  ngOnInit() {\n    this.squares = this.createSquares(15, 15);\n    this.squares$.next(this.squares); //this.subject.subscribe(x => this.squares = x)\n\n    const squares$ = merge(this.onMoveShooter(), this.onShoot(), this.movingRussianTroop()).pipe(map(x => this.updateSquare(x)), share());\n    const shootListener2$ = squares$.pipe(switchMap(x => from(x)), filter(x => {\n      let types = x.drawings.map(y => y.type);\n      return types.includes('invader') && types.includes('laser');\n    }));\n    this.addSubscription(squares$.subscribe(x => this.squares$.next(x)), // shootListener$.subscribe(x => console.log('rendered event', x)),\n    shootListener2$.subscribe(x => console.log('shoot', x))); // this.addSubscription(\n    //   this.onMoveShooter().subscribe(sd => this.subscribeToDrawingSquare(sd)),\n    //   this.onShoot().subscribe(sd => this.subscribeToDrawingSquare(sd)),\n    //   this.movingRussianTroop().subscribe(sd => this.subscribeToDrawingSquare(sd))\n    // )\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeComponent();\n  } //#region Calculating screen and squares\n\n\n  createSquares(columnSize, rowSize) {\n    this.columns = createColumns(columnSize);\n    this.rows = createRows(rowSize);\n    return createSquares(this.columns, this.rows);\n  }\n\n  getSquareClassnames(square) {\n    return square.drawings.map(d => d.type).join(' ');\n  }\n\n  updateSquare(drawing) {\n    // console.log('draw-square', drawing)\n    const erased = erase([...this.squares], drawing);\n    const drawed = draw(erased, drawing); // console.log(drawed)\n\n    return drawed;\n  }\n\n  getNextColumn(column) {\n    const index = this.columns.indexOf(column) + 1;\n\n    if (index >= 0 && index < this.columns.length) {\n      return this.columns[index];\n    }\n\n    return null;\n  }\n\n  getPrevColumn(column) {\n    const index = this.columns.indexOf(column) - 1;\n\n    if (index >= 0 && index < this.columns.length) {\n      return this.columns[index];\n    }\n\n    return null;\n  }\n\n  getNextRow(row) {\n    const index = this.rows.indexOf(row) + 1;\n\n    if (index >= 0 && index < this.rows.length) {\n      return this.rows[index];\n    }\n\n    return -1;\n  }\n\n  getPrevRow(row) {\n    const index = this.rows.indexOf(row) - 1;\n\n    if (index >= 0 && index < this.rows.length) {\n      return this.rows[index];\n    }\n\n    return -1;\n  } //#endregion\n  //#region Game observables\n\n\n  moveDrawing(direction, intervaltime, initialDrawing) {\n    const iterators = {\n      up: squareDraw => {\n        return new SquareDraw({\n          column: squareDraw.column,\n          row: this.getPrevRow(squareDraw.row),\n          name: squareDraw.drawing.name,\n          type: squareDraw.drawing.type\n        });\n      },\n      down: squareDraw => {\n        return new SquareDraw({\n          column: squareDraw.column,\n          row: this.getNextRow(squareDraw.row),\n          name: squareDraw.drawing.name,\n          type: squareDraw.drawing.type\n        });\n      },\n      right: squareDraw => {\n        return new SquareDraw({\n          column: this.getNextColumn(squareDraw.column),\n          row: squareDraw.row,\n          name: squareDraw.drawing.name,\n          type: squareDraw.drawing.type\n        });\n      },\n      left: squareDraw => {\n        return new SquareDraw({\n          column: this.getPrevColumn(squareDraw.column),\n          row: squareDraw.row,\n          name: squareDraw.drawing.name,\n          type: squareDraw.drawing.type\n        });\n      }\n    };\n\n    const columnCondition = squareDraw => {\n      const index = this.columns.indexOf(squareDraw.column);\n      return index >= 0 && index < this.columns.length;\n    };\n\n    const rowCondition = squareDraw => {\n      return squareDraw.row >= 0 && squareDraw.row < this.rows.length;\n    };\n\n    const conditions = {\n      up: rowCondition,\n      down: rowCondition,\n      right: columnCondition,\n      left: columnCondition\n    };\n    return generate({\n      initialState: initialDrawing,\n      condition: x => conditions[direction](x),\n      iterate: x => iterators[direction](x)\n    }).pipe(concatMap(item => of(item).pipe(delay(intervaltime))));\n  }\n\n  ghostOfKievShooting() {\n    const row = this.squareDrawShooter.row;\n    const laser = new SquareDraw({\n      column: this.squareDrawShooter.column,\n      row: this.getPrevRow(row),\n      name: 'ghost-of-kiev-laser',\n      type: 'laser'\n    });\n    return this.moveDrawing('up', 500, laser);\n  }\n\n  movingRussianTroop() {\n    return from([new SquareDraw({\n      column: 'B',\n      row: 0,\n      name: 'soldier-1',\n      type: 'invader'\n    }), new SquareDraw({\n      column: 'C',\n      row: 0,\n      name: 'soldier-2',\n      type: 'invader'\n    }), new SquareDraw({\n      column: 'D',\n      row: 0,\n      name: 'soldier-3',\n      type: 'invader'\n    })]).pipe(mergeMap(s => this.moveDrawing('down', 1000, s)));\n  }\n\n  onShoot() {\n    return this.fromElementRefEvent(this.screen, 'keydown').pipe(pluck('key'), filter(key => key === 'ArrowUp'), concatMap(() => this.ghostOfKievShooting()));\n  }\n\n  onMoveShooter() {\n    const moving$ = this.fromElementRefEvent(this.screen, 'keydown').pipe(pluck('key'));\n\n    const moveSquareDraw = () => source => source.pipe(skipWhile(column => column === null), map(column => {\n      return new SquareDraw({\n        column: column,\n        row: this.squareDrawShooter.row,\n        name: this.squareDrawShooter.drawing.name,\n        type: this.squareDrawShooter.drawing.type\n      });\n    }));\n\n    const right$ = moving$.pipe(filter(key => key === 'ArrowRight'), map(() => this.getNextColumn(this.squareDrawShooter.column)), moveSquareDraw());\n    const left$ = moving$.pipe(filter(key => key === 'ArrowLeft'), map(() => this.getPrevColumn(this.squareDrawShooter.column)), moveSquareDraw());\n    return merge(right$, left$).pipe(startWith(this.squareDrawShooter), tap(x => this.squareDrawShooter = x));\n  }\n\n  onRussianTroopBoom(squares$) {\n    return squares$.pipe(switchMap(x => from(x)), filter(x => {\n      let types = x.drawings.map(y => y.type);\n      return types.includes('invader') && types.includes('laser');\n    }));\n  }\n\n}\n\nReactiveGhostOfKievComponent.ɵfac = function ReactiveGhostOfKievComponent_Factory(t) {\n  return new (t || ReactiveGhostOfKievComponent)();\n};\n\nReactiveGhostOfKievComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReactiveGhostOfKievComponent,\n  selectors: [[\"app-reactive-ghost-of-kiev\"]],\n  viewQuery: function ReactiveGhostOfKievComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.screen = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 9,\n  vars: 4,\n  consts: [[\"contenteditable\", \"true\", \"tabindex\", \"0\", 1, \"message\", \"app-section\"], [\"screen\", \"\"], [1, \"message-header\"], [1, \"grid\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"message-body\"]],\n  template: function ReactiveGhostOfKievComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"article\", 0, 1)(2, \"div\", 2)(3, \"p\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtemplate(6, ReactiveGhostOfKievComponent_ng_template_6_Template, 2, 3, \"ng-template\", 4);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"div\", 5);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\" \", ctx.title, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 2, ctx.squares$));\n    }\n  },\n  directives: [i1.NgForOf],\n  pipes: [i1.AsyncPipe],\n  styles: [\".grid[_ngcontent-%COMP%] {\\n        width: 302px;\\n        height: 302px;\\n        border: solid black 1px;\\n        display: flex;\\n        flex-wrap: wrap;\\n      }\\n\\n      .grid[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n        width: 20px;\\n        height: 20px;\\n        border: solid burlywood 0.5px;\\n        font-size: 0.4rem;\\n      }\\n\\n      .invader[_ngcontent-%COMP%] {\\n        background-color: purple;\\n        border-radius: 10px;\\n      }\\n\\n      .shooter[_ngcontent-%COMP%] {\\n        background-color: green;\\n      }\\n\\n      .laser[_ngcontent-%COMP%] {\\n        background-color: orange;\\n      }\\n\\n      .boom[_ngcontent-%COMP%] {\\n        background-color: red;\\n      }\\n\\n      .app-section[_ngcontent-%COMP%] {\\n        caret-color: transparent;\\n      }\"]\n});","map":{"version":3,"sources":["/Users/benjamin/Documents/repositories/learning/reactive-programming-workshop/call-of-ukraine-frontend/src/app/presentation/pages/game/component/ghost-of-kiev/reactive-ghost-of-kiev.component.ts"],"names":["BehaviorSubject","concatMap","delay","filter","from","generate","map","merge","mergeMap","of","pluck","share","skipWhile","startWith","switchMap","tap","ReactiveComponent","erase","draw","SquareDraw","createColumns","createRows","createSquares","i0","i1","_c0","ReactiveGhostOfKievComponent_ng_template_6_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","square_r2","$implicit","ctx_r1","ɵɵnextContext","ɵɵclassMap","getSquareClassnames","ɵɵadvance","ɵɵtextInterpolate1","key","ReactiveGhostOfKievComponent","constructor","title","squares","columns","rows","squareDrawShooter","column","row","name","type","squares$","ngOnInit","next","onMoveShooter","onShoot","movingRussianTroop","pipe","x","updateSquare","shootListener2$","types","drawings","y","includes","addSubscription","subscribe","console","log","ngOnDestroy","unsubscribeComponent","columnSize","rowSize","square","d","join","drawing","erased","drawed","getNextColumn","index","indexOf","length","getPrevColumn","getNextRow","getPrevRow","moveDrawing","direction","intervaltime","initialDrawing","iterators","up","squareDraw","down","right","left","columnCondition","rowCondition","conditions","initialState","condition","iterate","item","ghostOfKievShooting","laser","s","fromElementRefEvent","screen","moving$","moveSquareDraw","source","right$","left$","onRussianTroopBoom","ɵfac","ReactiveGhostOfKievComponent_Factory","t","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","ReactiveGhostOfKievComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","ReactiveGhostOfKievComponent_Template","ɵɵtemplate","ɵɵpipe","ɵɵelement","ɵɵproperty","ɵɵpipeBind1","directives","NgForOf","pipes","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { BehaviorSubject, concatMap, delay, filter, from, generate, map, merge, mergeMap, of, pluck, share, skipWhile, startWith, switchMap, tap } from 'rxjs';\nimport { ReactiveComponent } from 'src/app/presentation/shared/utils/ReactiveComponent';\nimport { erase, draw, SquareDraw, createColumns, createRows, createSquares } from './model/Square';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"screen\"];\nfunction ReactiveGhostOfKievComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const square_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.getSquareClassnames(square_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", square_r2.key, \" \");\n} }\nexport class ReactiveGhostOfKievComponent extends ReactiveComponent {\n    constructor() {\n        super();\n        // screen\n        this.title = 'REACTIVE Ghost of Kiev';\n        this.squares = [];\n        this.columns = [];\n        this.rows = [];\n        // game\n        this.squareDrawShooter = new SquareDraw({ column: 'H', row: 14, name: 'ghost-of-kiev', type: 'shooter' });\n        // reactive components\n        //squares$: Observable<Square[]> = null\n        this.squares$ = new BehaviorSubject([]);\n    }\n    ngOnInit() {\n        this.squares = this.createSquares(15, 15);\n        this.squares$.next(this.squares);\n        //this.subject.subscribe(x => this.squares = x)\n        const squares$ = merge(this.onMoveShooter(), this.onShoot(), this.movingRussianTroop()).pipe(map(x => this.updateSquare(x)), share());\n        const shootListener2$ = squares$.pipe(switchMap(x => from(x)), filter(x => {\n            let types = x.drawings.map(y => y.type);\n            return types.includes('invader') && types.includes('laser');\n        }));\n        this.addSubscription(squares$.subscribe(x => this.squares$.next(x)), \n        // shootListener$.subscribe(x => console.log('rendered event', x)),\n        shootListener2$.subscribe(x => console.log('shoot', x)));\n        // this.addSubscription(\n        //   this.onMoveShooter().subscribe(sd => this.subscribeToDrawingSquare(sd)),\n        //   this.onShoot().subscribe(sd => this.subscribeToDrawingSquare(sd)),\n        //   this.movingRussianTroop().subscribe(sd => this.subscribeToDrawingSquare(sd))\n        // )\n    }\n    ngOnDestroy() {\n        this.unsubscribeComponent();\n    }\n    //#region Calculating screen and squares\n    createSquares(columnSize, rowSize) {\n        this.columns = createColumns(columnSize);\n        this.rows = createRows(rowSize);\n        return createSquares(this.columns, this.rows);\n    }\n    getSquareClassnames(square) {\n        return square.drawings.map(d => d.type).join(' ');\n    }\n    updateSquare(drawing) {\n        // console.log('draw-square', drawing)\n        const erased = erase([...this.squares], drawing);\n        const drawed = draw(erased, drawing);\n        // console.log(drawed)\n        return drawed;\n    }\n    getNextColumn(column) {\n        const index = this.columns.indexOf(column) + 1;\n        if (index >= 0 && index < this.columns.length) {\n            return this.columns[index];\n        }\n        return null;\n    }\n    getPrevColumn(column) {\n        const index = this.columns.indexOf(column) - 1;\n        if (index >= 0 && index < this.columns.length) {\n            return this.columns[index];\n        }\n        return null;\n    }\n    getNextRow(row) {\n        const index = this.rows.indexOf(row) + 1;\n        if (index >= 0 && index < this.rows.length) {\n            return this.rows[index];\n        }\n        return -1;\n    }\n    getPrevRow(row) {\n        const index = this.rows.indexOf(row) - 1;\n        if (index >= 0 && index < this.rows.length) {\n            return this.rows[index];\n        }\n        return -1;\n    }\n    //#endregion\n    //#region Game observables\n    moveDrawing(direction, intervaltime, initialDrawing) {\n        const iterators = {\n            up: (squareDraw) => {\n                return new SquareDraw({\n                    column: squareDraw.column,\n                    row: this.getPrevRow(squareDraw.row),\n                    name: squareDraw.drawing.name,\n                    type: squareDraw.drawing.type\n                });\n            },\n            down: (squareDraw) => {\n                return new SquareDraw({\n                    column: squareDraw.column,\n                    row: this.getNextRow(squareDraw.row),\n                    name: squareDraw.drawing.name,\n                    type: squareDraw.drawing.type\n                });\n            },\n            right: (squareDraw) => {\n                return new SquareDraw({\n                    column: this.getNextColumn(squareDraw.column),\n                    row: squareDraw.row,\n                    name: squareDraw.drawing.name,\n                    type: squareDraw.drawing.type\n                });\n            },\n            left: (squareDraw) => {\n                return new SquareDraw({\n                    column: this.getPrevColumn(squareDraw.column),\n                    row: squareDraw.row,\n                    name: squareDraw.drawing.name,\n                    type: squareDraw.drawing.type\n                });\n            }\n        };\n        const columnCondition = (squareDraw) => {\n            const index = this.columns.indexOf(squareDraw.column);\n            return index >= 0 && index < this.columns.length;\n        };\n        const rowCondition = (squareDraw) => {\n            return squareDraw.row >= 0 && squareDraw.row < this.rows.length;\n        };\n        const conditions = {\n            up: rowCondition,\n            down: rowCondition,\n            right: columnCondition,\n            left: columnCondition\n        };\n        return generate({\n            initialState: initialDrawing,\n            condition: x => conditions[direction](x),\n            iterate: x => iterators[direction](x),\n        }).pipe(concatMap((item) => of(item).pipe(delay(intervaltime))));\n    }\n    ghostOfKievShooting() {\n        const row = this.squareDrawShooter.row;\n        const laser = new SquareDraw({\n            column: this.squareDrawShooter.column,\n            row: this.getPrevRow(row),\n            name: 'ghost-of-kiev-laser',\n            type: 'laser'\n        });\n        return this.moveDrawing('up', 500, laser);\n    }\n    movingRussianTroop() {\n        return from([\n            new SquareDraw({ column: 'B', row: 0, name: 'soldier-1', type: 'invader' }),\n            new SquareDraw({ column: 'C', row: 0, name: 'soldier-2', type: 'invader' }),\n            new SquareDraw({ column: 'D', row: 0, name: 'soldier-3', type: 'invader' })\n        ]).pipe(mergeMap(s => this.moveDrawing('down', 1000, s)));\n    }\n    onShoot() {\n        return this.fromElementRefEvent(this.screen, 'keydown').pipe(pluck('key'), filter((key) => key === 'ArrowUp'), concatMap(() => this.ghostOfKievShooting()));\n    }\n    onMoveShooter() {\n        const moving$ = this.fromElementRefEvent(this.screen, 'keydown').pipe(pluck('key'));\n        const moveSquareDraw = () => (source) => source.pipe(skipWhile(column => column === null), map(column => {\n            return new SquareDraw({\n                column: column,\n                row: this.squareDrawShooter.row,\n                name: this.squareDrawShooter.drawing.name,\n                type: this.squareDrawShooter.drawing.type\n            });\n        }));\n        const right$ = moving$.pipe(filter((key) => key === 'ArrowRight'), map(() => this.getNextColumn(this.squareDrawShooter.column)), moveSquareDraw());\n        const left$ = moving$.pipe(filter((key) => key === 'ArrowLeft'), map(() => this.getPrevColumn(this.squareDrawShooter.column)), moveSquareDraw());\n        return merge(right$, left$).pipe(startWith(this.squareDrawShooter), tap(x => this.squareDrawShooter = x));\n    }\n    onRussianTroopBoom(squares$) {\n        return squares$.pipe(switchMap(x => from(x)), filter(x => {\n            let types = x.drawings.map(y => y.type);\n            return types.includes('invader') && types.includes('laser');\n        }));\n    }\n}\nReactiveGhostOfKievComponent.ɵfac = function ReactiveGhostOfKievComponent_Factory(t) { return new (t || ReactiveGhostOfKievComponent)(); };\nReactiveGhostOfKievComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ReactiveGhostOfKievComponent, selectors: [[\"app-reactive-ghost-of-kiev\"]], viewQuery: function ReactiveGhostOfKievComponent_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.screen = _t.first);\n    } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 4, consts: [[\"contenteditable\", \"true\", \"tabindex\", \"0\", 1, \"message\", \"app-section\"], [\"screen\", \"\"], [1, \"message-header\"], [1, \"grid\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"message-body\"]], template: function ReactiveGhostOfKievComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"article\", 0, 1)(2, \"div\", 2)(3, \"p\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, ReactiveGhostOfKievComponent_ng_template_6_Template, 2, 3, \"ng-template\", 4);\n        i0.ɵɵpipe(7, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"div\", 5);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.title, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 2, ctx.squares$));\n    } }, directives: [i1.NgForOf], pipes: [i1.AsyncPipe], styles: [\".grid[_ngcontent-%COMP%] {\\n        width: 302px;\\n        height: 302px;\\n        border: solid black 1px;\\n        display: flex;\\n        flex-wrap: wrap;\\n      }\\n\\n      .grid[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n        width: 20px;\\n        height: 20px;\\n        border: solid burlywood 0.5px;\\n        font-size: 0.4rem;\\n      }\\n\\n      .invader[_ngcontent-%COMP%] {\\n        background-color: purple;\\n        border-radius: 10px;\\n      }\\n\\n      .shooter[_ngcontent-%COMP%] {\\n        background-color: green;\\n      }\\n\\n      .laser[_ngcontent-%COMP%] {\\n        background-color: orange;\\n      }\\n\\n      .boom[_ngcontent-%COMP%] {\\n        background-color: red;\\n      }\\n\\n      .app-section[_ngcontent-%COMP%] {\\n        caret-color: transparent;\\n      }\"] });\n"]},"metadata":{},"sourceType":"module"}